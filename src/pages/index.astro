---
import SiteLayout from "../layouts/SiteLayout.astro";
import { getEntry } from "astro:content";
import GithubActivityCard from "../components/GithubActivityCard.astro";

const homepageEntry = await getEntry("homepage", "dashboard");
const heroCards = homepageEntry.data.highlightCards;
const activityCard = homepageEntry.data.activityCard;
const featureCards = heroCards;
const nowItems = homepageEntry.data.nowItems;
const timeline = homepageEntry.data.timeline;

const homepageSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "@id": "https://www.nbdevlab.com/#home",
  name: "nbdevlab — Home",
  description:
    "Builder notes, experiments, and shipped tools from Nathan Bullock. Track projects, lab milestones, and GitHub activity in one view.",
  url: "https://www.nbdevlab.com/",
  isPartOf: { "@id": "https://www.nbdevlab.com/#website" },
};
---

<SiteLayout
  title="nbdevlab — Builder notes and experiments"
  description="Builder notes, project milestones, and GitHub activity from Nathan Bullock's nbdevlab."
  structuredData={homepageSchema}
>
  <section class="hero">
    <div class="hero-shell">
      <div class="hero-grid">
        <div class="hero-main">
          <p class="hero-pre">Building • Automating • Learning</p>
          <h1 class="hero-title">Nathan Bullock</h1>
          <p class="hero-tagline">
            This space documents and shares my personal experiments, tinkering, and the lessons I've learned while exploring OpenAI's Codex to co-create new tools and automations.
          </p>
          <div class="hero-cta">
            <a href="/projects/" class="button button--primary">View Projects</a>
            <a href="/about/" class="button button--ghost">About Me</a>
          </div>
          <div class="hero-tags">
            {["Cloudflare", "Astro", "Homelab", "Tinkering", "Proxmox"].map((label) => (
              <span class="tag-bubble">#{label}</span>
            ))}
          </div>
        </div>
        <div class="hero-terminal">
          <div class="terminal-chrome">
            <div class="terminal-lights" aria-hidden="true">
              <span></span>
              <span></span>
              <span></span>
            </div>
            <span class="terminal-title">nbullock@homelab — zsh</span>
          </div>
          <pre id="terminal-body" class="terminal-code" aria-label="Recent terminal activity"></pre>
        </div>
      </div>
    </div>
  </section>

  <section class="feature-wrap">
    <div class="feature-grid">
      {featureCards.map((card) => (
        <a class="feature-card" href={card.href}>
          <span class="feature-card__badge">{card.badge}</span>
          <span class="feature-card__title">{card.title}</span>
          <span class="feature-card__description">{card.description}</span>
          <span class="feature-card__cta">
            Explore
            <span aria-hidden="true">↗</span>
          </span>
        </a>
      ))}
    </div>
    <div class="github-feature">
      <GithubActivityCard limit={5} />
      <article class="card">
        <span class="tag">{activityCard.badge}</span>
        {activityCard.description && <p>{activityCard.description}</p>}
        <a class="feature-card__cta" href={activityCard.href} target="_blank" rel="noopener noreferrer">
          {activityCard.title}
          <span aria-hidden="true">↗</span>
        </a>
      </article>
    </div>
  </section>

  <section class="card-grid">
    <article class="card">
      <header class="card__header">
        <span class="tag">Now</span>
        <h2 class="card__title">What I&apos;m tuning this week</h2>
        <p class="muted">
          A living list of focus areas that shape how I spend late-night sessions tinkering with nbdevlab.
        </p>
      </header>
      <ul class="list-reset stack-sm">
        {nowItems.map((item) => (
          <li>
            <strong>{item.label}</strong>
            <p class="muted">{item.detail}</p>
          </li>
        ))}
      </ul>
    </article>

    <article class="card" id="milestones">
      <header class="card__header">
        <span class="tag">Milestones</span>
        <h2 class="card__title">Lab notes &amp; changelog</h2>
        <p class="muted">The latest beats moving nbdevlab forward, from shipping notes to roadmap checkpoints.</p>
      </header>
      <ol class="timeline list-reset">
        {timeline.map((entry) => (
          <li class="timeline__item">
            <span class="timeline__date">{entry.date}</span>
            <div class="timeline__content">
              <span class="timeline__title">{entry.title}</span>
              <span class="timeline__detail">{entry.detail}</span>
            </div>
          </li>
        ))}
      </ol>
    </article>
  </section>

  <script is:inline>
    const term = document.getElementById('terminal-body');
    if (term) {
      const palette = {
        user: '#3c7bff',
        path: '#7aa2ff',
        branch: '#88f7c8',
        accent: '#2f66d0',
      };
      const prompt = () => `<span style="color:${palette.user}">nbullock@homelab</span> <span style="color:${palette.path}">~/lab</span> <span style="color:${palette.branch}">main</span> <span style="color:${palette.accent}">$</span>`;
      const lines = [
        `${prompt()} git status`,
        `→ workspace clean`,
        `${prompt()} npm run sync`,
        `→ content collections refreshed`,
        `${prompt()} npm run build`,
        `→ deploy succeeded`,
        `Live at https://www.nbdevlab.com`,
      ];
      let lineIndex = 0;
      let charIndex = 0;
      let buffer = '';

      const type = () => {
        if (lineIndex >= lines.length) {
          term.innerHTML = buffer + prompt() + ' <span class="caret">|</span>';
          return;
        }
        const current = lines[lineIndex];
        if (charIndex <= current.length) {
          term.innerHTML = buffer + current.slice(0, charIndex) + '<span class="caret">|</span>';
          charIndex += 1;
          const delay = 26 + Math.random() * 28;
          window.setTimeout(type, delay);
        } else {
          buffer += current + "\n";
          lineIndex += 1;
          charIndex = 0;
          window.setTimeout(type, 360);
        }
      };

      type();
    }
  </script>
</SiteLayout>
