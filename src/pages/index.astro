---
import SiteLayout from "../layouts/SiteLayout.astro";
import { getEntry } from "astro:content";
import GithubActivityCard from "../components/GithubActivityCard.astro";

const homepageEntry = await getEntry("homepage", "dashboard");
const heroCards = homepageEntry.data.highlightCards;
const activityCard = homepageEntry.data.activityCard;
const featureCards = heroCards;
const nowItems = homepageEntry.data.nowItems;
const timeline = homepageEntry.data.timeline;

const homepageSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "@id": "https://www.nbdevlab.com/#home",
  name: "nbdevlab — Home",
  description:
    "Builder notes, experiments, and shipped tools from Nathan Bullock. Track projects, lab milestones, and GitHub activity in one view.",
  url: "https://www.nbdevlab.com/",
  isPartOf: { "@id": "https://www.nbdevlab.com/#website" },
};
---
<SiteLayout
  title="nbdevlab — Builder notes and experiments"
  description="Builder notes, project milestones, and GitHub activity from Nathan Bullock's nbdevlab."
  structuredData={homepageSchema}
>
  <section class="hero" aria-labelledby="hero-heading">
    <div class="layout-shell hero__grid">
      <div class="stack-lg">
        <span class="pill" aria-hidden="true">Building • Automating • Learning</span>
        <h1 id="hero-heading" class="hero__title">Nathan Bullock</h1>
        <p class="hero__lead">
          This space documents and shares my personal experiments, tinkering, and the lessons I've learned while exploring OpenAI's
          Codex to co-create new tools and automations.
        </p>
        <div class="hero__cta">
          <a href="/projects/" class="button" data-variant="default">View Projects</a>
          <a href="/about/" class="button button--ghost" data-variant="ghost">About Me</a>
        </div>
        <div class="hero__tags">
          {["Cloudflare", "Astro", "Homelab", "Tinkering", "Proxmox"].map((label) => (
            <span class="tag-chip">#{label}</span>
          ))}
        </div>
      </div>
      <div class="hero__terminal" aria-live="polite">
        <div class="muted" style="font-size: 0.8rem; text-transform: uppercase; letter-spacing: 0.12em;">nbullock@homelab — zsh</div>
        <pre id="terminal-body"></pre>
      </div>
    </div>
    <script is:inline>
      const term = document.getElementById('terminal-body');
      if (term) {
        const palette = {
          user: '#2b9c74',
          path: '#c5943a',
          branch: '#7191ff',
          symbol: '#5465d8',
          accent: '#2454d3'
        };
        const prompt = () => `<span style="color:${palette.user}">nbullock@homelab</span> <span style="color:${palette.path}">~/lab</span> <span style="color:${palette.branch}">main</span> <span style="color:${palette.symbol}">$</span> `;
        const scriptLines = [
          `${prompt()}git status`,
          `<span style="color:${palette.accent}">→</span> workspace clean`,
          `${prompt()}npm run sync`,
          `<span style="color:${palette.accent}">→</span> content collections refreshed`,
          `${prompt()}npm run build`,
          `<span style="color:${palette.accent}">→</span> deploy to production`,
          `<span style="color:${palette.branch}">✓</span> live at https://www.nbdevlab.com`,
        ];
        let lineIndex = 0;
        let charIndex = 0;
        let buffer = '';
        const speeds = { base: 26, jitter: 24 };
        const tick = () => {
          if (lineIndex >= scriptLines.length) {
            term.innerHTML = buffer + prompt().trimEnd() + ' <span class="caret">|</span>';
            return;
          }
          const line = scriptLines[lineIndex];
          if (charIndex <= line.length) {
            const slice = line.slice(0, charIndex);
            term.innerHTML = buffer + slice + '<span class="caret">|</span>';
            charIndex += 1;
            const delay = speeds.base + Math.random() * speeds.jitter * (Math.random() > 0.9 ? 3 : 1);
            window.setTimeout(tick, delay);
          } else {
            buffer += line + '\n';
            lineIndex += 1;
            charIndex = 0;
            window.setTimeout(tick, 320);
          }
        };
        tick();
      }
    </script>
    <style is:global>
      #terminal-body {
        min-height: 12rem;
        margin: 0;
        color: var(--color-text);
        font-family: var(--font-mono);
        font-size: 0.95rem;
        line-height: 1.55;
        white-space: pre-wrap;
      }
      .caret {
        color: var(--color-accent);
        animation: blink 1.05s steps(1) infinite;
      }
      @keyframes blink {
        0%, 55% { opacity: 1; }
        56%, 100% { opacity: 0; }
      }
    </style>
  </section>

  <section class="stack-lg" aria-labelledby="highlights-heading">
    <div class="layout-shell stack-lg">
      <header class="stack-sm">
        <h2 id="highlights-heading">Highlights</h2>
        <p class="muted">A quick tour of the current nbdevlab focus areas, recent launches, and live dashboards.</p>
      </header>
      <div class="feature-grid">
        {featureCards.map((card) => (
          <a class="feature-card" href={card.href}>
            <span class="feature-card__badge">{card.badge}</span>
            <span class="feature-card__title">{card.title}</span>
            <p class="feature-card__description">{card.description}</p>
            <span class="feature-card__cta">
              Explore
              <span aria-hidden="true">↗</span>
            </span>
          </a>
        ))}
      </div>
      <div class="dashboard-grid">
        <GithubActivityCard limit={5} />
        <article class="card" aria-labelledby="github-meta-heading">
          <div class="card__header">
            <span class="card__meta">{activityCard.badge}</span>
            <h3 id="github-meta-heading" class="card__title">{activityCard.title}</h3>
          </div>
          {activityCard.description && <p class="card__body">{activityCard.description}</p>}
          <div class="card__footer">
            <a href={activityCard.href} class="button button--ghost" target="_blank" rel="noopener noreferrer">
              View on GitHub ↗
            </a>
          </div>
        </article>
      </div>
    </div>
  </section>

  <section class="stack-lg" aria-labelledby="now-heading">
    <div class="layout-shell stack-lg">
      <header class="stack-sm">
        <h2 id="now-heading">Now</h2>
        <p class="muted">Updated with the latest focus areas guiding experiments and the milestone timeline tracking progress.</p>
      </header>
      <div class="dashboard-grid">
        <article class="card" aria-labelledby="focus-title">
          <div class="card__header">
            <span class="card__meta">Active focus areas</span>
            <h3 id="focus-title" class="card__title">What I'm tuning</h3>
          </div>
          <ul class="list-reset stack-sm">
            {nowItems.map((item) => (
              <li>
                <p class="card__body" style="margin: 0; color: var(--color-text); font-weight: 600;">{item.label}</p>
                <p class="muted" style="margin: 0;">{item.detail}</p>
              </li>
            ))}
          </ul>
        </article>
        <article class="card" aria-labelledby="timeline-heading">
          <div class="card__header">
            <span class="card__meta">Milestones</span>
            <h3 id="timeline-heading" class="card__title">Lab notes &amp; changelog</h3>
          </div>
          <ol class="list-reset stack-sm" style="margin: 0;">
            {timeline.map((entry) => (
              <li>
                <p class="timestamp" style="margin: 0;">{entry.date}</p>
                <p class="card__body" style="margin: 0; color: var(--color-text); font-weight: 600;">{entry.title}</p>
                <p class="muted" style="margin: 0;">{entry.detail}</p>
              </li>
            ))}
          </ol>
        </article>
      </div>
    </div>
  </section>
</SiteLayout>
