---
import SiteLayout from "../layouts/SiteLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";

type Project = CollectionEntry<"projects">;

const allProjects = (await getCollection("projects")) as Project[];
const projects = allProjects.filter((p) => !p.data.draft);

projects.sort((a, b) => {
  const af = a.data.featured ? 1 : 0;
  const bf = b.data.featured ? 1 : 0;
  if (bf !== af) return bf - af;
  const aw = a.data.weight ?? 0, bw = b.data.weight ?? 0;
  if (bw !== aw) return bw - aw;
  const at = a.data.pubDate ? +a.data.pubDate : 0;
  const bt = b.data.pubDate ? +b.data.pubDate : 0;
  return bt - at;
});

const idToPath = (id: string) =>
  id.replace(/\/index\.mdx?$/i, "/").replace(/\.mdx?$/i, "").replace(/\.md$/i, "");

const hrefFor = (p: Project) => p.data.link ?? `/projects/${idToPath(p.id)}`;
---

<SiteLayout title="Projects — Nathan Bullock">
  <section class="hero">
    <h1>Projects</h1>
    <p class="muted">Selected work &amp; homelab builds.</p>
  </section>

  <div class="grid">
    {projects.map((p: Project) => {
      const isExternal = !!p.data.link;
      return isExternal ? (
        <a class="card" href={hrefFor(p)} target="_blank" rel="noreferrer">
          {p.data.image && <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />}
          <h3>{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">
              {p.data.tags.map((t: string) => <span class="badge">{t}</span>)}
            </div>
          )}
        </a>
      ) : (
        <button
          type="button"
          class="card card-btn"
          data-slug={p.slug}
          aria-haspopup="dialog"
          aria-controls="project-modal"
        >
          {p.data.image && <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />}
          <h3>{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">
              {p.data.tags.map((t: string) => <span class="badge">{t}</span>)}
            </div>
          )}
        </button>
      );
    })}
  </div>

  <!-- Pre-render modal content for internal (non-link) posts -->
  {await Promise.all(
    projects
      .filter((p) => !p.data.link)
      .map(async (p: Project) => {
        const { Content } = await p.render();
        return (
          <template id={`tpl-${p.slug}`}>
            <article class="prose">
              <header style="margin-bottom:.75rem">
                <h2 id="project-modal-title" style="margin:0">{p.data.title}</h2>
                {p.data.description && <p class="muted" style="margin:.25rem 0 0">{p.data.description}</p>}
              </header>
              {p.data.image && <img src={p.data.image} alt="" style="width:100%;border-radius:12px;margin:.5rem 0 1rem;" />}
              <Content />
            </article>
          </template>
        );
      })
  )}

  <!-- Modal root -->
  <div id="project-modal" class="modal hidden" role="dialog" aria-modal="true" aria-labelledby="project-modal-title">
    <div class="modal__backdrop" data-close></div>
    <div class="modal__panel" role="document">
      <button class="modal__close" type="button" aria-label="Close" data-close>✕</button>
      <div class="modal__body" id="project-modal-body" tabindex="0"></div>
    </div>
  </div>

  <style>
    .card.card-btn { text-align: left; background: transparent; border: none; padding: 0; cursor: pointer; }
    /* Modal layout */
    .modal.hidden { display: none; }
    .modal { position: fixed; inset: 0; z-index: 60; }
    .modal__backdrop { position: absolute; inset: 0; background: rgba(0,0,0,.55); backdrop-filter: blur(2px); }
    .modal__panel {
      position: relative;
      margin: 5vh auto;
      max-width: 920px;
      width: min(92vw, 920px);
      max-height: 88vh;
      background: var(--card, rgba(18,24,38,.9));
      border: 1px solid rgba(255,255,255,.08);
      border-radius: 16px;
      box-shadow: 0 10px 40px rgba(0,0,0,.4);
      overflow: hidden;
    }
    .modal__close {
      position: absolute; top: 10px; right: 10px;
      width: 36px; height: 36px; border-radius: 10px;
      background: rgba(255,255,255,.06); color: #fff; border: 1px solid rgba(255,255,255,.08);
      font-size: 18px; line-height: 1;
    }
    .modal__body { padding: 20px; overflow: auto; max-height: 88vh; }
    .prose :where(img){max-width:100%;height:auto}
  </style>

<script is:inline>
  (() => {
    const modal = document.getElementById('project-modal');
    const body  = document.getElementById('project-modal-body');
    if (!modal || !body) return;

    let lastFocus = null;

    const open = (slug) => {
      const tpl = document.getElementById('tpl-' + slug);
      if (!(tpl && 'content' in tpl)) return;
      body.innerHTML = '';
      body.append(tpl.content.cloneNode(true));
      lastFocus = document.activeElement;
      modal.classList.remove('hidden');
      document.documentElement.style.overflow = 'hidden';
      modal.querySelector('.modal__close')?.focus();
    };

    const close = () => {
      modal.classList.add('hidden');
      document.documentElement.style.overflow = '';
      body.innerHTML = '';
      if (lastFocus && lastFocus.focus) lastFocus.focus();
    };

    // One listener for everything (works even if cards are re-rendered)
    document.addEventListener('click', (e) => {
      const target = e.target;
      const btn = target instanceof Element ? target.closest('.card-btn') : null;
      if (btn) {
        e.preventDefault();
        const slug = btn.getAttribute('data-slug');
        if (slug) open(slug);
        return;
      }
      const closeEl = target instanceof Element ? target.closest('[data-close]') : null;
      if (closeEl) {
        e.preventDefault();
        close();
      }
    });

    window.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        e.preventDefault();
        close();
      }
    });
  })();
</script>

</SiteLayout>
