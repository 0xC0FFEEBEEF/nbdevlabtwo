---
import SiteLayout from "../layouts/SiteLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";

type Project = CollectionEntry<"projects">;

const allProjects = (await getCollection("projects")) as Project[];
const projects = allProjects.filter((p) => !p.data.draft);

// sort: featured → weight → pubDate (desc)
projects.sort((a, b) => {
  const af = a.data.featured ? 1 : 0;
  const bf = b.data.featured ? 1 : 0;
  if (bf !== af) return bf - af;
  const aw = a.data.weight ?? 0, bw = b.data.weight ?? 0;
  if (bw !== aw) return bw - aw;
  const at = a.data.pubDate ? +a.data.pubDate : 0;
  const bt = b.data.pubDate ? +b.data.pubDate : 0;
  return bt - at;
});

const idToPath = (id: string) =>
  id.replace(/\/index\.mdx?$/i, "/").replace(/\.mdx?$/i, "").replace(/\.md$/i, "");

const hrefFor = (p: Project) => p.data.link ?? `/projects/${idToPath(p.id)}`;

// stay safe: use only [a-z0-9_-] in element IDs
const safeSlug = (s: string) => s.replace(/[^a-z0-9_-]/gi, "_");
---

<SiteLayout title="Projects — Nathan Bullock">
  <section class="hero">
    <h1>Projects</h1>
    <p class="muted">Selected work &amp; homelab builds.</p>
  </section>

  <div class="grid">
    {projects.map((p: Project) => {
      const isExternal = !!p.data.link;
      const sslug = safeSlug(p.slug);
      return isExternal ? (
        <a
          class="card transition transform hover:-translate-y-0.5 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-sky-400"
          href={hrefFor(p)}
          target="_blank"
          rel="noreferrer"
        >
          {p.data.image && (
            <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />
          )}
          <h3 class="text-slate-100 font-semibold text-lg leading-tight mb-1">{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">{p.data.tags.map((t: string) => <span class="badge">{t}</span>)}</div>
          )}
        </a>
      ) : (
        <button
          type="button"
          class="card card-btn transition transform hover:-translate-y-0.5 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-sky-400 text-left"
          data-slug={sslug}
          aria-haspopup="dialog"
          aria-controls="project-modal"
        >
          {p.data.image && (
            <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />
          )}
          <h3 class="text-slate-100 font-semibold text-lg leading-tight mb-1">{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">{p.data.tags.map((t: string) => <span class="badge">{t}</span>)}</div>
          )}
        </button>
      );
    })}
  </div>

  {/* Pre-render modal content for internal (non-link) posts */}
  {await Promise.all(
    projects
      .filter((p) => !p.data.link)
      .map(async (p: Project) => {
        const { Content } = await p.render();
        const sslug = safeSlug(p.slug);
        return (
          <template id={`tpl-${p.slug}`}>
            <article class="prose prose-invert max-w-none after:content-[''] after:block after:clear-both modal-prose">
              <header class="mb-3 not-prose">
                <h2 id="project-modal-title" class="m-0 text-xl md:text-2xl font-semibold tracking-tight text-white">
                  {p.data.title}
                </h2>
                {p.data.description && (
                  <p class="muted mt-1">{p.data.description}</p>
                )}
              </header>
              {p.data.image && (
                <img
                  src={p.data.image}
                  alt=""
                  loading="lazy"
                  class="w-full md:w-80 md:float-right md:ml-6 md:mb-2 rounded-xl ring-1 ring-black/10 dark:ring-white/10"
                />
              )}
              <Content />
            </article>
          </template>
        );
      })
  )}

  {/* Tailwind modal */}
  <div
    id="project-modal"
    class="hidden fixed inset-0 z-50"
    role="dialog"
    aria-modal="true"
    aria-labelledby="project-modal-title"
  >
    <div class="absolute inset-0 bg-black/60 backdrop-blur-sm" data-close></div>

    <div
      class="relative mx-auto my-6 sm:my-12 w-[92vw] max-w-3xl max-h-[88vh]
             overflow-hidden rounded-2xl border border-white/10
             bg-slate-900/90 shadow-2xl ring-1 ring-black/5"
      role="document"
    >
      <button
        class="absolute right-3 top-3 inline-flex h-9 w-9 items-center justify-center
               rounded-lg border border-white/10 bg-white/5 text-white
               hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-sky-400"
        type="button"
        aria-label="Close"
        data-close
      >✕</button>

      <div id="project-modal-body" class="p-5 overflow-auto max-h-[88vh]" tabindex="0"></div>
    </div>
  </div>

  <!-- Inline script so it always runs -->
  <script is:inline>
    // @ts-nocheck
    (() => {
      const modal = document.getElementById('project-modal');
      const body  = document.getElementById('project-modal-body');
      if (!modal || !body) return;

      let lastFocus;

      const open = (slug) => {
        const tpl = document.getElementById('tpl-' + slug);
        if (!(tpl && 'content' in tpl)) return;
        body.innerHTML = '';
        body.append(tpl.content.cloneNode(true));
        lastFocus = document.activeElement;
        modal.classList.remove('hidden');
        document.documentElement.classList.add('overflow-hidden');
        modal.querySelector('[data-close]')?.focus();
      };

      const close = () => {
        modal.classList.add('hidden');
        document.documentElement.classList.remove('overflow-hidden');
        body.innerHTML = '';
        lastFocus?.focus?.();
      };

      document.addEventListener('click', (e) => {
        const el = e.target instanceof Element ? e.target : null;
        if (!el) return;

        const btn = el.closest('.card-btn');
        if (btn) {
          e.preventDefault();
          const slug = btn.getAttribute('data-slug');
          if (slug) open(slug);
          return;
        }

        if (el.closest('[data-close]')) {
          e.preventDefault();
          close();
        }
      });

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          e.preventDefault();
          close();
        }
      });
    })();
  </script>

  <style is:global>
    /* Modal content improvements */
    .modal-prose {
      background: rgba(17, 24, 39, 0.98);
      border-radius: 16px;
      padding: 1.5rem 1.5rem 1.25rem 1.5rem;
      box-shadow: 0 8px 32px 0 rgba(0,0,0,0.25);
      color: #e5e7eb;
    }
    .modal-prose h2, .modal-prose h3, .modal-prose h1 {
      color: #fff !important;
      text-shadow: 0 1px 2px rgba(0,0,0,0.18);
    }
    .modal-prose p {
      color: #cbd5e1;
    }
    .modal-prose hr {
      border-color: #334155;
      margin: 1.2em 0;
    }
  </style>
</SiteLayout>
