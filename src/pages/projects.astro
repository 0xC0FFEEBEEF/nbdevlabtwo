---
import SiteLayout from "../layouts/SiteLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";

type Project = CollectionEntry<"projects">;

const allProjects = (await getCollection("projects")) as Project[];
const projects = allProjects.filter((p) => !p.data.draft);

// sort: featured → weight → pubDate (desc)
projects.sort((a, b) => {
  const af = a.data.featured ? 1 : 0;
  const bf = b.data.featured ? 1 : 0;
  if (bf !== af) return bf - af;
  const aw = a.data.weight ?? 0, bw = b.data.weight ?? 0;
  if (bw !== aw) return bw - aw;
  const at = a.data.pubDate ? +a.data.pubDate : 0;
  const bt = b.data.pubDate ? +b.data.pubDate : 0;
  return bt - at;
});

const idToPath = (id: string) =>
  id.replace(/\/index\.mdx?$/i, "/").replace(/\.mdx?$/i, "").replace(/\.md$/i, "");

const hrefFor = (p: Project) => p.data.link ?? `/projects/${idToPath(p.id)}`;

// stay safe: use only [a-z0-9_-] in element IDs
const safeSlug = (s: string) => s.replace(/[^a-z0-9_-]/gi, "_");
---

<SiteLayout title="Projects — Nathan Bullock">
  <section class="hero">
    <h1>Projects</h1>
    <p class="muted">Selected work &amp; homelab builds.</p>
  </section>

  <div class="grid" id="projects-grid">
    {projects.map((p: Project) => {
      const isExternal = !!p.data.link;
      const sslug = safeSlug(p.slug);
      return isExternal ? (
        <a
          class="card transition transform hover:-translate-y-0.5 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-sky-400"
          href={hrefFor(p)}
          target="_blank"
          rel="noreferrer"
        >
          {p.data.image && (
            <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />
          )}
          <h3 class="text-slate-100 font-semibold text-lg leading-tight mb-1">{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">{p.data.tags.map((t: string) => <span class="badge">{t}</span>)}</div>
          )}
        </a>
      ) : (
        <button
          type="button"
          class="card card-btn transition transform hover:-translate-y-0.5 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-sky-400 text-left"
          data-slug={sslug}
          aria-haspopup="dialog"
          aria-controls="project-modal"
        >
          {p.data.image && (
            <img src={p.data.image} alt="" loading="lazy" style="width:100%;border-radius:12px;margin-bottom:.5rem;" />
          )}
          <h3 class="text-slate-100 font-semibold text-lg leading-tight mb-1">{p.data.title}</h3>
          {p.data.description && <p class="muted">{p.data.description}</p>}
          {p.data.tags && (
            <div class="badges">{p.data.tags.map((t: string) => <span class="badge">{t}</span>)}</div>
          )}
        </button>
      );
    })}
  </div>

  {/* Pre-render modal content for internal (non-link) posts */}
  {await Promise.all(
    projects
      .filter((p) => !p.data.link)
      .map(async (p: Project) => {
        const { Content } = await p.render();
        const sslug = safeSlug(p.slug);
        return (
          <template id={`tpl-${sslug}`}>
            <article class="modal-prose">
              <header class="modal-header">
                <h2 id="project-modal-title">{p.data.title}</h2>
                {p.data.description && <p class="muted">{p.data.description}</p>}
              </header>
              {p.data.image && (
                <img
                  src={p.data.image}
                  alt=""
                  loading="lazy"
                  class="modal-img"
                />
              )}
              <Content />
            </article>
          </template>
        );
      })
  )}

  <!-- Animated expander layer (injected dynamically) -->
  <div id="expander-root" aria-live="polite"></div>

  <script is:inline>
    // Fancy card -> reader expansion animation (progressive enhancement)
    (() => {
      const grid = document.getElementById('projects-grid');
      const root = document.getElementById('expander-root');
      if(!grid || !root) return;

      let openSlug = null;
      let lastFocus = null;

      function qs(id){ return document.getElementById(id); }

      function createBackdrop(){
        const backdrop = document.createElement('div');
        backdrop.className = 'expander-backdrop';
        backdrop.dataset.close = 'true';
        return backdrop;
      }

      function createShell(rect){
        const shell = document.createElement('div');
        shell.className = 'expander-shell';
        shell.style.setProperty('--start-left', rect.left + 'px');
  // For position:fixed we use viewport coordinates (no scrollY offset)
  shell.style.setProperty('--start-top', rect.top + 'px');
        shell.style.setProperty('--start-width', rect.width + 'px');
        shell.style.setProperty('--start-height', rect.height + 'px');
        return shell;
      }

      function injectContent(slug, container){
        const tpl = qs('tpl-' + slug);
        if(!(tpl && 'content' in tpl)) return;
        const articleWrap = document.createElement('div');
        articleWrap.className = 'expander-content scrollable';
        articleWrap.append(tpl.content.cloneNode(true));
        // Close button
        const closeBtn = document.createElement('button');
        closeBtn.type = 'button';
        closeBtn.className = 'expander-close';
        closeBtn.innerHTML = '✕';
        closeBtn.setAttribute('aria-label','Close project');
        closeBtn.dataset.close = 'true';
        container.append(closeBtn, articleWrap);
      }

      function open(slug, trigger){
        if(openSlug) return; // one at a time
        const card = trigger.closest('.card-btn');
        if(!card) return;
        const rect = card.getBoundingClientRect();
        lastFocus = trigger;
        document.documentElement.classList.add('overflow-hidden');
        openSlug = slug;

        const backdrop = createBackdrop();
        const shell = createShell(rect);
        root.innerHTML = '';
        root.append(backdrop, shell);

        requestAnimationFrame(() => {
          shell.classList.add('expanding');
          let injected = false;
          const finish = () => {
            if(injected) return; injected = true;
            shell.classList.add('loaded');
            injectContent(slug, shell);
            shell.querySelector('.expander-close')?.focus();
          };
          // Prefer transitionend, but don't depend solely on one property
          shell.addEventListener('transitionend', () => finish(), { once:true });
          // Safety fallback (in case transition event is swallowed or reduced-motion)
            setTimeout(finish, 600);
        });
      }

      function close(){
        const shell = root.querySelector('.expander-shell');
        if(!shell) return;
        const rect = document.querySelector(`[data-slug="${openSlug}"]`)?.getBoundingClientRect();
        shell.classList.remove('loaded');
        // If original rect exists, animate back
        if(rect){
          shell.style.setProperty('--end-left', rect.left + 'px');
          // Match fixed positioning coordinate space on close as well
          shell.style.setProperty('--end-top', rect.top + 'px');
          shell.style.setProperty('--end-width', rect.width + 'px');
          shell.style.setProperty('--end-height', rect.height + 'px');
          shell.classList.add('shrinking');
          shell.addEventListener('transitionend', () => {
            root.innerHTML = '';
          }, { once:true });
        } else {
          root.innerHTML = '';
        }
        document.documentElement.classList.remove('overflow-hidden');
        openSlug = null;
        lastFocus?.focus?.();
      }

      document.addEventListener('click', (e) => {
        const el = e.target instanceof Element ? e.target : null;
        if(!el) return;
        if(el.closest('[data-close]')){ e.preventDefault(); close(); return; }
        const btn = el.closest('.card-btn');
        if(btn){
          const slug = btn.getAttribute('data-slug');
            if(slug){ e.preventDefault(); open(slug, btn); }
        }
      });

      window.addEventListener('keydown', (e) => {
        if(e.key === 'Escape' && openSlug){ e.preventDefault(); close(); }
      });
    })();
  </script>

  <style is:global>
    /* Expander animation layer */
    #expander-root{position:relative;z-index:60}
    .expander-backdrop{position:fixed;inset:0;background:rgba(0,0,0,.70);backdrop-filter:blur(10px);animation:expanderFade .3s ease both}
    @keyframes expanderFade{from{opacity:0}to{opacity:1}}
  .expander-shell{position:fixed;left:var(--start-left);top:var(--start-top);width:var(--start-width);height:var(--start-height);border:1.5px solid var(--outline);border-radius:16px;background:linear-gradient(160deg,#0c0c0c,#121212 55%,#0c0c0c);box-shadow:0 12px 42px -10px rgba(0,0,0,.65),0 0 0 1px rgba(255,145,0,.35);overflow:hidden;transition:transform .55s cubic-bezier(.16,.8,.25,1),border-radius .55s,left .55s,top .55s,width .55s,height .55s,opacity .45s;display:flex;flex-direction:column;will-change:transform,left,top,width,height}
  /* Start slightly scaled and faded for a more noticeable opening motion */
  .expander-shell{transform:translate(0,0) scale(.92);opacity:.85}
  .expander-shell.expanding{left:50%;top:54vh;transform:translate(-50%,-50%) scale(1);width:min(100vw,880px);height:min(86vh,920px);opacity:1}
    .expander-shell.expanding:not(.loaded){transform-origin:center center;}
    .expander-shell.loaded{background:linear-gradient(170deg,#0c0c0c,#151515 60%,#101010);}
  .expander-shell.shrinking{left:var(--end-left);top:var(--end-top);width:var(--end-width);height:var(--end-height);transform:translate(0,0) scale(.92);opacity:.85}
    .expander-close{position:absolute;top:.65rem;right:.65rem;height:2.2rem;width:2.2rem;border:1px solid rgba(255,145,0,.55);background:rgba(255,145,0,.08);color:#ffd7a1;border-radius:10px;font-size:1rem;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:background .25s,border-color .25s,color .25s;z-index:10}
    .expander-close:hover{background:rgba(255,145,0,.18);border-color:rgba(255,145,0,.85);color:#fff}
    .expander-content{padding:3.25rem 1.75rem 2rem 1.75rem;overflow-y:auto;flex:1;scrollbar-width:thin;}
    .expander-content::-webkit-scrollbar{width:10px}
    .expander-content::-webkit-scrollbar-track{background:rgba(255,255,255,.04)}
    .expander-content::-webkit-scrollbar-thumb{background:linear-gradient(#ff9100,#ff7b00);border-radius:20px;border:2px solid #111}
    .expander-content article, .expander-content .modal-prose{background:transparent;box-shadow:none;padding:0;margin:0;max-width:780px;color:#ddd}
    .expander-content h1,.expander-content h2,.expander-content h3{color:#fafafa}
    .expander-content p{color:#c9c9c9;line-height:1.6}
    .expander-content img{max-width:100%;border-radius:14px;margin:1rem auto;box-shadow:0 4px 26px -10px rgba(0,0,0,.6)}
    @media (max-width:820px){
      .expander-shell.expanding{width:92vw;height:88vh;top:52vh}
      .expander-content{padding:2.75rem 1.1rem 1.6rem 1.1rem}
    }
    @media (prefers-reduced-motion: reduce){
      .expander-shell{transition:none}
  .expander-shell.expanding{left:50%;top:54vh;transform:translate(-50%,-50%);width:min(100vw,880px);height:min(86vh,920px);opacity:1}
    }
  </style>
</SiteLayout>
