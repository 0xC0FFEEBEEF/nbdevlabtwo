---
import SiteLayout from "../layouts/SiteLayout.astro";
---
<SiteLayout title="Status — nbdevlab" description="Live status for nbdevlab services, uptime, and recent incidents.">
  <section class="projects-shell" aria-labelledby="status-heading">
    <header>
      <h1 id="status-heading">Status</h1>
      <p>Live service health pulled from <code>/status.json</code>. Updates every time the data source changes.</p>
    </header>

    <article class="status-card" id="status-dashboard" aria-live="polite">
      <div class="card__header">
        <h2>Service health</h2>
        <p class="timestamp" data-status-timestamp>Loading status…</p>
      </div>
      <div class="status-grid" data-status-loading>
        <span class="skeleton" style="width: 65%"></span>
        <span class="skeleton" style="width: 45%"></span>
        <span class="skeleton" style="width: 55%"></span>
      </div>
      <div class="status-grid" data-status-body hidden>
        <ul class="list-reset" data-services></ul>
        <section aria-labelledby="status-incidents-heading">
          <h3 id="status-incidents-heading">Recent incidents</h3>
          <ul class="list-reset" data-incidents></ul>
          <p class="muted" data-incidents-empty hidden>No incidents reported in the last 30 days.</p>
        </section>
        <div class="status-legend" aria-label="Status legend">
          <span><i style="background: var(--color-good);"></i> Operational</span>
          <span><i style="background: var(--color-warn);"></i> Degraded</span>
          <span><i style="background: var(--color-bad);"></i> Outage</span>
        </div>
      </div>
      <div class="projects-empty" data-status-error hidden role="status">
        Unable to load the status dashboard right now. Please try again soon.
      </div>
    </article>
  </section>

  <script is:inline>
    (() => {
      const dashboard = document.getElementById("status-dashboard");
      if (!dashboard) return;
      const loading = dashboard.querySelector('[data-status-loading]');
      const body = dashboard.querySelector('[data-status-body]');
      const servicesList = dashboard.querySelector('[data-services]');
      const incidentsList = dashboard.querySelector('[data-incidents]');
      const incidentsEmpty = dashboard.querySelector('[data-incidents-empty]');
      const error = dashboard.querySelector('[data-status-error]');
      const timestamp = dashboard.querySelector('[data-status-timestamp]');

      const setState = (state) => {
        if (state === "loading") {
          loading && loading.removeAttribute("hidden");
          body && body.setAttribute("hidden", "true");
          error && error.setAttribute("hidden", "true");
        } else if (state === "ready") {
          loading && loading.setAttribute("hidden", "true");
          body && body.removeAttribute("hidden");
          error && error.setAttribute("hidden", "true");
        } else {
          loading && loading.setAttribute("hidden", "true");
          body && body.setAttribute("hidden", "true");
          error && error.removeAttribute("hidden");
        }
      };

      const formatTimestamp = (value) => {
        try {
          const date = new Date(value);
          return `Updated ${date.toLocaleString()}`;
        } catch {
          return "Updated recently";
        }
      };

      const render = (data) => {
        if (!data || !servicesList) throw new Error("No data");
        servicesList.innerHTML = Array.isArray(data.services)
          ? data.services
              .map(
                (service) => `
              <li style="margin-bottom: 0.85rem;">
                <div class="status-indicator" data-state="${service.status}">
                  <span aria-hidden="true">●</span>
                  ${service.name}
                </div>
                <p class="muted" style="margin: 0.35rem 0 0;">${service.description ?? ""}</p>
                ${service.uptime ? `<p class="timestamp">Uptime: ${service.uptime}</p>` : ""}
              </li>
            `
              )
              .join("")
          : "";

        if (incidentsList && Array.isArray(data.incidents) && data.incidents.length > 0) {
          incidentsList.innerHTML = data.incidents
            .map(
              (incident) => `
            <li style="margin-bottom: 0.75rem;">
              <div class="status-indicator" data-state="${incident.impact}">
                <span aria-hidden="true">●</span>
                ${incident.title}
              </div>
              <p class="timestamp">${new Date(incident.timestamp).toLocaleString()}${incident.resolved ? " • Resolved" : ""}</p>
              <p class="muted">${incident.notes ?? ""}</p>
            </li>
          `
            )
            .join("");
          incidentsEmpty && incidentsEmpty.setAttribute("hidden", "true");
        } else {
          incidentsList && (incidentsList.innerHTML = "");
          incidentsEmpty && incidentsEmpty.removeAttribute("hidden");
        }

        if (timestamp) {
          timestamp.textContent = data.updated ? formatTimestamp(data.updated) : "Updated recently";
        }
      };

      setState("loading");

      fetch("/status.json", { headers: { Accept: "application/json" } })
        .then((response) => (response.ok ? response.json() : Promise.reject(new Error("Failed to fetch"))))
        .then((data) => {
          render(data);
          setState("ready");
        })
        .catch(() => {
          setState("error");
        });
    })();
  </script>
</SiteLayout>
