---
import SiteLayout from "../../layouts/SiteLayout.astro";
import { getCollection } from "astro:content";
import type { ProjectCollectionEntry } from "../../content/config";
import { formatDate } from "../../lib/date";
import { normalizeProjects, resolveProjectSlug } from "../../lib/projects";
import "../../styles/projects.css";

export async function getStaticPaths() {
  const projects = normalizeProjects(await getCollection("projects"));
  return projects.map((project) => ({
    params: { slug: resolveProjectSlug(project) },
  }));
}

const { slug } = Astro.params;
const projects = normalizeProjects(await getCollection("projects"));
const sorted = [...projects].sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
const entry = sorted.find((item) => resolveProjectSlug(item) === slug);

if (!entry) {
  return Astro.redirect("/projects");
}

const index = sorted.findIndex((item) => item.id === entry.id);
const previous: ProjectCollectionEntry | undefined = index > 0 ? sorted[index - 1] : undefined;
const next: ProjectCollectionEntry | undefined = index < sorted.length - 1 ? sorted[index + 1] : undefined;
const previousSlug = previous ? resolveProjectSlug(previous) : undefined;
const nextSlug = next ? resolveProjectSlug(next) : undefined;
const { Content } = await entry.render();

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "SoftwareSourceCode",
  name: entry.data.title,
  dateCreated: entry.data.date,
  programmingLanguage: entry.data.stack.join(", "),
  keywords: entry.data.tags.join(", "),
  url: new URL(`/projects/${resolveProjectSlug(entry)}/`, "https://www.nbdevlab.com").toString(),
  maintainer: {
    "@type": "Person",
    name: "Nathan Bullock",
    url: "https://www.nbdevlab.com/",
  },
};
---
<SiteLayout
  title={`${entry.data.title} — nbdevlab project`}
  description={entry.data.problem}
  structuredData={jsonLd}
>
  <script type="application/ld+json" is:inline>{JSON.stringify(jsonLd)}</script>
  <article class="project-detail" aria-labelledby="project-title">
    <header>
      <p class="timestamp">{formatDate(entry.data.date)}</p>
      <h1 id="project-title">{entry.data.title}</h1>
      <div class="chip-row">
        <span class="status-chip" data-status={entry.data.status}>
          <span aria-hidden="true">●</span>
          {entry.data.status}
        </span>
        {entry.data.tags.map((tag) => (
          <span class="tag-chip">
            <span aria-hidden="true"></span>
            {tag}
          </span>
        ))}
      </div>
    </header>

    <section class="project-facts" aria-labelledby="project-facts-heading">
      <h2 id="project-facts-heading" class="sr-only">Project facts</h2>
      <table>
        <tbody>
          <tr>
            <th scope="row">Status</th>
            <td>{entry.data.status}</td>
          </tr>
          <tr>
            <th scope="row">Published</th>
            <td>{formatDate(entry.data.date)}</td>
          </tr>
          <tr>
            <th scope="row">Stack</th>
            <td>{entry.data.stack.join(", ")}</td>
          </tr>
          {entry.data.constraints.length > 0 && (
            <tr>
              <th scope="row">Constraints</th>
              <td>
                <ul>
                  {entry.data.constraints.map((constraint) => (
                    <li>{constraint}</li>
                  ))}
                </ul>
              </td>
            </tr>
          )}
          {entry.data.lessons.length > 0 && (
            <tr>
              <th scope="row">Lessons</th>
              <td>
                <ul>
                  {entry.data.lessons.map((lesson) => (
                    <li>{lesson}</li>
                  ))}
                </ul>
              </td>
            </tr>
          )}
          {entry.data.links && (
            <tr>
              <th scope="row">Links</th>
              <td>
                <ul>
                  {entry.data.links.repo && (
                    <li>
                      <a href={entry.data.links.repo} target="_blank" rel="noopener noreferrer">
                        Repository ↗
                      </a>
                    </li>
                  )}
                  {entry.data.links.demo && (
                    <li>
                      <a href={entry.data.links.demo} target="_blank" rel="noopener noreferrer">
                        Demo ↗
                      </a>
                    </li>
                  )}
                </ul>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </section>

    <section class="project-body prose" aria-label="Project details">
      <Content />
    </section>
  </article>

  <nav class="projects-nav" aria-label="Project navigation">
    {previous && previousSlug ? (
      <a href={`/projects/${previousSlug}/`} aria-label={`Previous project: ${previous.data.title}`}>
        ← Prev: {previous.data.title}
      </a>
    ) : (
      <span aria-hidden="true"></span>
    )}
    {next && nextSlug ? (
      <a href={`/projects/${nextSlug}/`} aria-label={`Next project: ${next.data.title}`}>
        Next: {next.data.title} →
      </a>
    ) : (
      <span aria-hidden="true"></span>
    )}
  </nav>
</SiteLayout>
