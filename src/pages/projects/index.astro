---
import SiteLayout from "../../layouts/SiteLayout.astro";
import { getCollection } from "astro:content";
import type { ProjectCollectionEntry } from "../../content/config";
import { formatDate } from "../../lib/date";
import { normalizeProjects, resolveProjectSlug } from "../../lib/projects";
import "../../styles/projects.css";

const requestUrl = Astro.request?.url ?? "https://www.nbdevlab.com/projects/";
const url = new URL(requestUrl);

const rawProjects = await getCollection("projects");
const projectsCollection = normalizeProjects(rawProjects);

const validStatuses = ["shipped", "building", "research"] as const;
const validStatusSet = new Set(validStatuses);
const selectedStatuses = Array.from(
  new Set(
    url.searchParams
      .getAll("status")
      .filter((status) => validStatusSet.has(status as (typeof validStatuses)[number])) as (typeof validStatuses)[number][]
  )
);
const selectedTags = Array.from(new Set(url.searchParams.getAll("tag").filter(Boolean)));

const sortParam = url.searchParams.get("sort") ?? "date-desc";
const SORT_OPTIONS = new Map<
  string,
  { label: string; compare: (a: ProjectCollectionEntry, b: ProjectCollectionEntry) => number }
>([
  [
    "date-desc",
    {
      label: "Newest",
      compare: (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
    },
  ],
  [
    "date-asc",
    {
      label: "Oldest",
      compare: (a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime(),
    },
  ],
]);
const sort = SORT_OPTIONS.has(sortParam) ? sortParam : "date-desc";

const filtered = projectsCollection
  .filter((entry) => {
    if (selectedStatuses.length > 0 && !selectedStatuses.includes(entry.data.status)) {
      return false;
    }
    if (selectedTags.length > 0 && !selectedTags.every((tag) => entry.data.tags.includes(tag))) {
      return false;
    }
    return true;
  })
  .sort(SORT_OPTIONS.get(sort)!.compare);

const PER_PAGE = 12;
const totalPages = Math.max(1, Math.ceil(filtered.length / PER_PAGE));
const currentPage = (() => {
  const fromParam = Number.parseInt(url.searchParams.get("page") ?? "1", 10);
  if (Number.isNaN(fromParam) || fromParam < 1) return 1;
  if (fromParam > totalPages) return totalPages;
  return fromParam;
})();

const paginated = filtered.slice((currentPage - 1) * PER_PAGE, currentPage * PER_PAGE);

const allTags = Array.from(new Set(projectsCollection.flatMap((entry) => entry.data.tags))).sort((a, b) =>
  a.localeCompare(b)
);

function buildPageUrl(page: number) {
  const next = new URL(url);
  next.searchParams.set("page", String(page));
  return `${next.pathname}${next.search ? `?${next.searchParams.toString()}` : ""}`;
}

const resetUrl = `${url.pathname}`;

const jsonLd = paginated.map((project) => ({
  "@context": "https://schema.org",
  "@type": "SoftwareSourceCode",
  name: project.data.title,
  dateCreated: project.data.date,
  programmingLanguage: project.data.stack.join(", "),
  keywords: project.data.tags.join(", "),
  url: new URL(`/projects/${resolveProjectSlug(project)}/`, "https://www.nbdevlab.com").toString(),
  maintainer: {
    "@type": "Person",
    name: "Nathan Bullock",
    url: "https://www.nbdevlab.com/",
  },
}));
---
<SiteLayout
  title="Projects — nbdevlab"
  description="Deep dives into nbdevlab builds: shipped products, in-progress experiments, and the lessons learned."
  structuredData={jsonLd}
>
  <script type="application/ld+json" is:inline>{JSON.stringify(jsonLd)}</script>
  <section class="projects-shell" aria-labelledby="projects-heading">
    <header>
      <h1 id="projects-heading">Projects &amp; case studies</h1>
      <p>
        Explorations from the nbdevlab workshop — automation, interfaces, and homelab systems. Filter by status, stack, and tags to
        find exactly what shipped.
      </p>
    </header>

    <form class="projects-filters" method="get" id="projects-filter-form" aria-labelledby="projects-filters-heading">
      <h2 id="projects-filters-heading" class="sr-only">Filter projects</h2>
      <fieldset>
        <legend>Status</legend>
        <div class="projects-filters__group">
          {validStatuses.map((status) => (
            <label>
              <input type="checkbox" name="status" value={status} checked={selectedStatuses.includes(status)} />
              <span></span>
              <span>{status}</span>
            </label>
          ))}
        </div>
      </fieldset>
      {allTags.length > 0 && (
        <fieldset>
          <legend>Tags</legend>
          <div class="projects-filters__group">
            {allTags.map((tag) => (
              <label>
                <input type="checkbox" name="tag" value={tag} checked={selectedTags.includes(tag)} />
                <span></span>
                <span>#{tag}</span>
              </label>
            ))}
          </div>
        </fieldset>
      )}
      <fieldset>
        <legend class="sr-only">Sort projects</legend>
        <label>
          <span>Sort</span>
          <select name="sort" value={sort}>
            {Array.from(SORT_OPTIONS.entries()).map(([value, option]) => (
              <option value={value} selected={sort === value}>
                {option.label}
              </option>
            ))}
          </select>
        </label>
      </fieldset>
      <div class="projects-filters__group" style="justify-content: flex-end;">
        <a class="button button--ghost" href={resetUrl}>Reset filters</a>
      </div>
    </form>

    {paginated.length > 0 ? (
      <div class="projects-grid" role="list">
        {paginated.map((entry) => (
          <a class="project-card" role="listitem" href={`/projects/${resolveProjectSlug(entry)}/`}>
            <span class="status-chip" data-status={entry.data.status}>{entry.data.status}</span>
            <h2 class="project-card__title">{entry.data.title}</h2>
            <p class="project-card__description">{entry.data.problem}</p>
            <div class="project-card__meta">
              <span>{formatDate(entry.data.date)}</span>
              <span aria-hidden="true">•</span>
              <span>{entry.data.stack.join(", ")}</span>
            </div>
            <ul class="project-card__tags">
              {entry.data.tags.map((tag) => (
                <li>
                  <span class="tag-chip">
                    <span aria-hidden="true"></span>
                    {tag}
                  </span>
                </li>
              ))}
            </ul>
          </a>
        ))}
      </div>
    ) : (
      <div class="projects-empty" role="status">No projects match those filters just yet. Try adjusting the status or tags.</div>
    )}

    <div class="projects-pagination">
      <div class="projects-pagination__status">
        Page {currentPage} of {totalPages}
      </div>
      <div class="projects-pagination__links">
        {currentPage > 1 ? (
          <a href={buildPageUrl(currentPage - 1)} aria-label="Previous page">← Prev</a>
        ) : undefined}
        {currentPage < totalPages ? (
          <a href={buildPageUrl(currentPage + 1)} aria-label="Next page">Next →</a>
        ) : undefined}
      </div>
    </div>
  </section>

  <script is:inline>
    (() => {
      const form = document.getElementById("projects-filter-form") as HTMLFormElement | null;
      if (!form) return;
      form.addEventListener("change", (event) => {
        const formData = new FormData(form);
        const params = new URLSearchParams();
        for (const [key, value] of formData.entries()) {
          if (typeof value === "string" && value.length > 0) {
            params.append(key, value);
          }
        }
        const target = event.target as HTMLElement | null;
        if (!(target && target.tagName === "SELECT")) {
          params.delete("page");
        }
        const search = params.toString();
        const next = `${window.location.pathname}${search ? `?${search}` : ""}`;
        window.location.assign(next);
      });
    })();
  </script>
</SiteLayout>
