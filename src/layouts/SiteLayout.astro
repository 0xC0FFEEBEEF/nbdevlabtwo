---
import BaseHead from "../components/BaseHead.astro";
import "../styles/global.css";
import BackToTopButton from "../components/BackToTopButton.astro";
import { SearchDialog } from "../components/SearchDialog";
import { ThemeToggle } from "../components/ThemeToggle";

interface Props {
  title?: string;
  description?: string;
  image?: string;
  structuredData?: Array<Record<string, unknown>> | Record<string, unknown>;
}

const {
  title = "nbdevlab — Nathan Bullock",
  description = "Builder notes, project breakdowns, and homelab experiments from nbdevlab.",
  image,
  structuredData,
} = Astro.props as Props;

const NAV_LINKS = [
  { href: "/", label: "Home" },
  { href: "/about/", label: "About" },
  { href: "/projects/", label: "Projects" },
  { href: "/uses/", label: "Uses" },
  { href: "/now/", label: "Now" },
  { href: "/status/", label: "Status" },
  { href: "/admin/", label: "Admin" },
] as const;

const currentPath = Astro.url.pathname.replace(/\/+/g, "/");

function isActive(href: string) {
  return href === "/" ? currentPath === "/" : currentPath.startsWith(href);
}

const footerYear = new Date().getFullYear();
---
<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <BaseHead title={title} description={description} image={image} structuredData={structuredData} />
    <script is:inline>
      (() => {
        try {
          const storageKey = "nbdevlab-theme";
          const stored = localStorage.getItem(storageKey);
          const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
          const theme = stored ?? (prefersDark ? "dark" : "light");
          document.documentElement.dataset.theme = theme;
          document.documentElement.classList.toggle("dark", theme === "dark");
        } catch (error) {
          console.warn("Failed to restore theme", error);
        }
      })();
    </script>
  </head>
  <body>
    <a href="#main-content" class="skip-nav">Skip to main content</a>
    <header class="site-header" role="banner">
      <div class="layout-shell">
        <div class="site-header__row">
          <a class="site-header__brand" href="/">
            <span class="site-header__logo" aria-hidden="true">NB</span>
            <span class="sr-only">nbdevlab — Home</span>
            <span aria-hidden="true">nbdevlab</span>
          </a>
          <button
            type="button"
            class="site-header__menu"
            data-nav-toggle
            aria-label="Toggle navigation"
            aria-controls="site-navigation"
            aria-expanded="false"
          >
            Menu
          </button>
          <nav id="site-navigation" class="site-header__nav" aria-label="Primary navigation" data-nav>
            <div class="site-header__links">
              {NAV_LINKS.map((item) => (
                <a class={isActive(item.href) ? "is-active" : undefined} href={item.href}>
                  <span>{item.label}</span>
                </a>
              ))}
            </div>
            <div class="site-header__utilities">
              <SearchDialog client:load />
              <ThemeToggle client:load />
            </div>
          </nav>
        </div>
      </div>
    </header>
    <main id="main-content" class="site-main">
      <div class="layout-shell">
        <slot />
      </div>
    </main>
    <footer class="site-footer">
      <div class="layout-shell">
        <div class="site-footer__row">
          <p>© {footerYear} Nathan Bullock. Built in Astro, deployed on Cloudflare Pages.</p>
          <div class="chip-row" role="list">
            <a role="listitem" href="/projects/" class="button button--ghost">Projects</a>
            <a role="listitem" href="/blog/" class="button button--ghost">Lab Notes</a>
          </div>
        </div>
      </div>
    </footer>
    <BackToTopButton />
    <script is:inline>
      (() => {
        const toggle = document.querySelector<HTMLButtonElement>("[data-nav-toggle]");
        const nav = document.querySelector<HTMLElement>("[data-nav]");
        if (!toggle || !nav) return;
        const closeNav = () => {
          nav.classList.remove("is-open");
          toggle.setAttribute("aria-expanded", "false");
        };
        toggle.addEventListener("click", () => {
          const isOpen = nav.classList.toggle("is-open");
          toggle.setAttribute("aria-expanded", String(isOpen));
          if (isOpen) {
            const firstLink = nav.querySelector<HTMLAnchorElement>("a");
            firstLink?.focus();
          }
        });
        document.addEventListener("keyup", (event) => {
          if (event.key === "Escape") {
            closeNav();
            toggle.focus();
          }
        });
        nav.addEventListener("click", (event) => {
          if (event.target instanceof HTMLAnchorElement) {
            closeNav();
          }
        });
      })();
    </script>
  </body>
</html>
