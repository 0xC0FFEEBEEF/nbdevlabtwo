---
interface Props {
  limit?: number;
}

const { limit = 5 } = Astro.props as Props;
const requestUrl = Astro.request?.url ?? "https://nbdevlab.pages.dev";
const canFetchServer = typeof Astro.request !== "undefined";
let items: Array<{
  type: string;
  repo: string;
  url: string;
  title: string;
  timestamp: string;
}> = [];
let errored = false;

function formatRelativeTime(iso: string): string {
  try {
    const date = new Date(iso);
    if (Number.isNaN(date.getTime())) return "just now";
    const diffSeconds = Math.round((Date.now() - date.getTime()) / 1000);
    const formatter = new Intl.RelativeTimeFormat("en", { numeric: "auto" });
    const intervals: Array<{ limit: number; divisor: number; unit: Intl.RelativeTimeFormatUnit }> = [
      { limit: 60, divisor: 1, unit: "seconds" },
      { limit: 3600, divisor: 60, unit: "minutes" },
      { limit: 86400, divisor: 3600, unit: "hours" },
      { limit: 604800, divisor: 86400, unit: "days" },
      { limit: 2419200, divisor: 604800, unit: "weeks" },
      { limit: 29030400, divisor: 2419200, unit: "months" },
      { limit: Number.POSITIVE_INFINITY, divisor: 29030400, unit: "years" },
    ];
    const absSeconds = Math.abs(diffSeconds);
    for (const { limit, divisor, unit } of intervals) {
      if (absSeconds < limit) {
        const value = Math.round(diffSeconds / divisor);
        return formatter.format(-value, unit);
      }
    }
    return formatter.format(0, "seconds");
  } catch {
    return "just now";
  }
}

if (canFetchServer) {
  try {
    const apiUrl = new URL("/api/github", requestUrl);
    const response = await fetch(apiUrl.toString(), {
      headers: { Accept: "application/json" },
    });
    if (response.ok) {
      const data = (await response.json()) as { items?: typeof items };
      if (Array.isArray(data.items)) {
        items = data.items.slice(0, limit);
      }
    } else {
      errored = true;
    }
  } catch (error) {
    if (import.meta.env.DEV) {
      console.error("github-activity-card", error);
    }
    errored = true;
  }
}

const hasItems = items.length > 0;
const cardId = `github-card-${Math.random().toString(36).slice(2, 10)}`;
const shouldHydrateClient = !canFetchServer || errored;
const initialState = hasItems ? "ready" : shouldHydrateClient ? "loading" : "empty";
const emptyMessage = errored ? "GitHub is quiet right now. Try again soon." : "No recent public commits or merges yet.";
---
<section
  class="github-card"
  aria-labelledby="github-activity-heading"
  role="region"
  id={cardId}
  data-github-card
  data-state={initialState}
  data-fetch={shouldHydrateClient ? "true" : "false"}
  data-empty-message={emptyMessage}
  data-limit={String(limit)}
>
  <div class="card__header">
    <h2 id="github-activity-heading">Latest GitHub activity</h2>
    <p class="muted">Edge-cached events refreshed regularly without over-polling the API.</p>
  </div>
  <div
    class="github-card__loading"
    role="status"
    aria-live="polite"
    data-loading
    hidden={initialState !== "loading"}
  >
    <span class="skeleton" style="width: 70%"></span>
    <span class="skeleton" style="width: 55%"></span>
    <span class="skeleton" style="width: 62%"></span>
  </div>
  <ol class="github-card__list" data-items hidden={initialState !== "ready"}>
    {items.map((item) => (
      <li class="github-card__item" data-type={item.type}>
        <div class="github-card__meta">
          <span class="github-card__repo" aria-label={`Repository ${item.repo}`}>{item.repo}</span>
          <span>{item.type.replace("Event", "")}</span>
          <span>{formatRelativeTime(item.timestamp)}</span>
        </div>
        <a class="github-card__link" href={item.url} target="_blank" rel="noopener noreferrer">
          <span>{item.title}</span>
          <span aria-hidden="true">↗</span>
        </a>
      </li>
    ))}
  </ol>
  <div class="github-card__empty" role="status" aria-live="polite" data-empty hidden={initialState !== "empty"}>
    {emptyMessage}
  </div>
</section>

<script is:inline>
  (() => {
    const card = document.getElementById({JSON.stringify(cardId)});
    if (!card) return;
    const loading = card.querySelector<HTMLElement>("[data-loading]");
    const list = card.querySelector<HTMLOListElement>("[data-items]");
    const empty = card.querySelector<HTMLElement>("[data-empty]");
    const limit = Number(card.dataset.limit ?? "5") || 5;

    const setState = (state) => {
      card.dataset.state = state;
      loading?.toggleAttribute("hidden", state !== "loading");
      list?.toggleAttribute("hidden", state !== "ready");
      empty?.toggleAttribute("hidden", state !== "empty");
    };

    if (card.dataset.state === "loading") {
      const timeout = window.setTimeout(() => {
        if (card.dataset.state === "loading") {
          empty && (empty.textContent = card.dataset.emptyMessage ?? "No recent activity");
          setState("empty");
        }
      }, 3500);
      card.addEventListener(
        "github:ready",
        () => {
          window.clearTimeout(timeout);
        },
        { once: true }
      );
    }

    if (card.dataset.fetch === "true") {
      const formatRelativeTime = (value) => {
        try {
          const date = new Date(value);
          if (Number.isNaN(date.getTime())) return "just now";
          const diffSeconds = Math.round((Date.now() - date.getTime()) / 1000);
          const formatter = new Intl.RelativeTimeFormat("en", { numeric: "auto" });
          const intervals = [
            { limit: 60, divisor: 1, unit: "seconds" },
            { limit: 3600, divisor: 60, unit: "minutes" },
            { limit: 86400, divisor: 3600, unit: "hours" },
            { limit: 604800, divisor: 86400, unit: "days" },
            { limit: 2419200, divisor: 604800, unit: "weeks" },
            { limit: 29030400, divisor: 2419200, unit: "months" },
            { limit: Number.POSITIVE_INFINITY, divisor: 29030400, unit: "years" },
          ];
          const absSeconds = Math.abs(diffSeconds);
          for (const { limit: l, divisor, unit } of intervals) {
            if (absSeconds < l) {
              const value = Math.round(diffSeconds / divisor);
              return formatter.format(-value, unit);
            }
          }
          return formatter.format(0, "seconds");
        } catch {
          return "just now";
        }
      };

      fetch(`/api/github?limit=${limit}`)
        .then((response) => (response.ok ? response.json() : Promise.reject(new Error("Request failed"))))
        .then((data) => {
          if (!Array.isArray(data?.items) || data.items.length === 0) {
            empty && (empty.textContent = card.dataset.emptyMessage ?? "No recent activity");
            setState("empty");
            return;
          }
          const items = data.items.slice(0, limit);
          if (!list) return;
          list.innerHTML = items
            .map(
              (item) => `
              <li class="github-card__item" data-type="${item.type}">
                <div class="github-card__meta">
                  <span class="github-card__repo" aria-label="Repository ${item.repo}">${item.repo}</span>
                  <span>${item.type.replace("Event", "")}</span>
                  <span>${formatRelativeTime(item.timestamp)}</span>
                </div>
                <a class="github-card__link" href="${item.url}" target="_blank" rel="noopener noreferrer">
                  <span>${item.title}</span>
                  <span aria-hidden="true">↗</span>
                </a>
              </li>
            `
            )
            .join("");
          setState("ready");
          card.dispatchEvent(new CustomEvent("github:ready"));
        })
        .catch(() => {
          empty && (empty.textContent = "Unable to load GitHub activity right now.");
          setState("empty");
        });
    }
  })();
</script>
